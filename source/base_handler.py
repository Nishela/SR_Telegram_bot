import nltk
from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from tic_tac_toe.source import abstract_interface
from source import Keyboard
import random

all = ("BaseHandler", "Greetings", "Apology", "Unknown", "Questions")


class BaseHandler:
    def __init__(self):
        self.keyboard = Keyboard()

    @staticmethod
    def __answer_choice(update, context, variants):
        answer = None
        for k, v in variants.items():
            answer = variants[k] if (itm in update.message.text for itm in k) else None
            break
        if answer:
            context.bot.send_message(chat_id=update.effective_chat.id, text=answer)
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text=variants["–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])
        return "FREE_MESSAGE"

    @staticmethod
    def ask_user_name(update, context):
        context.bot.send_message(
            chat_id=update.effective_chat.id, text=f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {update.message.text}!"
        )
        return "FREE_MESSAGE"

    def ask_user_affairs(self, update, context):
        variants = {
            ("—Ö–æ—Ä–æ—à–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "—Å—É–ø–µ—Ä", "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ"): "–Ø —Ä–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å!",
            ("–ø–ª–æ—Ö–æ", "–Ω–µ –æ—á–µ–Ω—å", "–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ", "—Ñ–∏–≥–æ–≤–æ"): "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!",
            "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ": "–•–º–º... –°—Ç—Ä–∞–Ω–Ω—ã–µ –¥–µ–ª–∞))",
        }
        return self.__answer_choice(update, context, variants)

    def ask_user_mood(self, update, context):
        variants = {
            ("—Ö–æ—Ä–æ—à–µ–µ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ", "—Å—É–ø–µ—Ä—Å–∫–æ–µ", "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ–µ"): "–ö—Ä—É—Ç–æ!",
            ("–ø–ª–æ—Ö–æ–µ", "–Ω–µ –æ—á–µ–Ω—å", "–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ–µ", "—Ñ–∏–≥–æ–≤–æ–µ"): "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ! –£–ª—ã–±–Ω–∏—Å—å!",
            "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ": "–•–º–º... –ú–Ω–µ —ç—Ç–æ –Ω–µ –∑–Ω–∞–∫–æ–º–æ =(",
        }
        return self.__answer_choice(update, context, variants)

    #     def start(self, update: Update, context: CallbackContext):
    #         update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç!\n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /stop\n–ö–∞–∫ —Ç–≤–æ–µ –∏–º—è?")
    #         return 1
    #
    #     def help(self, update: Update, context: CallbackContext):
    #         text = f"""–Ø –±–æ—Ç - {update.effective_chat.bot['first_name']}!
    # –ù–∏—Ñ–∏–≥–∞ –Ω–µ —É–º–µ—é, –Ω–æ —Å–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å —á–µ–º—É-–Ω–∏–±—É–¥—å —Ö–æ—Ä–æ—à–µ–º—É!
    # –ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä - /start
    # –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä - /stop"""
    #         context.bot.send_message(chat_id=update.effective_chat.id, text=text)

    def stop(self, update: Update, context: CallbackContext):
        print(context.user_data)
        update.message.reply_text("–ü–æ–∫–∞!")
        return ConversationHandler.END

    # def unknown_command(self, update: Update, context: CallbackContext):
    #     context.bot.send_message(
    #         chat_id=update.effective_chat.id, text="–Ø –Ω–∞ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã ü§®\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑–æ–∫!"
    #     )
    # return ConversationHandler.END

    #     def get_name(self, update: Update, context: CallbackContext):
    #         context.user_data["name"] = update.message.text
    #         update.message.reply_text(
    #             f"""–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {context.user_data["name"]}!
    # –ö–∞–∂–µ—Ç—Å—è, —è –∑–Ω–∞—é —Ç–≤–æ—é —Ñ–∞–º–∏–ª–∏—é... –°–∫–∞–∑–∞—Ç—å?!""",
    #             reply_markup=self.keyboard(),
    #         )
    #         return 2

    # def user_last_name(self, update: Update, context: CallbackContext):
    #     text = update.message.text
    #     context.user_data["choice"] = text
    #     if text == "–ù–µ—Ç":
    #         update.message.reply_text("–ù—É –∫–∞–∫ —Ö–æ—á–µ—à—å...", reply_markup=self.keyboard.clear())
    #         return ConversationHandler.END
    #     update.message.reply_text(
    #         f'–¢–≤–æ—è —Ñ–∞–º–∏–ª–∏—è {update.effective_user["last_name"]}!', reply_markup=self.keyboard.clear()
    #     )
    #     return ConversationHandler.END

    # def choice_game_mode(self, update: Update, context: CallbackContext):
    #     context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã!")

    def __del__(self):
        print(1)


class Greetings:
    def __init__(self):
        self.answers = (
            "–ü—Ä–∏–≤–µ—Ç!",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!",
            "–ü—Ä–∏–≤–µ—Ç–∏–∫!",
            "Hello!",
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!",
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!",
        )

    def __call__(self, update, context):
        context.bot.send_message(chat_id=update.effective_chat.id, text=random.choice(self.answers))


class Apology:
    def __init__(self):
        self.answers = (
            "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ!",
            "–û–∫, –∏–∑–≤–∏–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã...",
            "–ë–æ–ª—å—à–µ —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞–π...",
        )

    def __call__(self, update, context):
        context.bot.send_message(chat_id=update.effective_chat.id, text=random.choice(self.answers))


class Unknown:
    def __init__(self):
        self.answers = (
            "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, –æ —á—ë–º —Ç—ã.",
            "–í–æ—Ç —ç—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ñ—Ä–∞–∑–∞ –º–Ω–µ –Ω–µ —è—Å–Ω–∞.",
            "–ê –≤–æ—Ç —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ.",
            "–ú–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å —Ç–æ –∂–µ —Å–∞–º–æ–µ –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏?",
            "–í–æ—Ç —Å–µ–π—á–∞—Å —è —Ç–µ–±—è —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–Ω–∏–º–∞—é.",
            "–ü–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã—Ä–∞–∑–∏—Ç—å —Å–≤–æ—é –º—ã—Å–ª—å –ø–æ-–¥—Ä—É–≥–æ–º—É.",
        )

    def __call__(self, update, context):
        context.bot.send_message(chat_id=update.effective_chat.id, text=random.choice(self.answers))


class Questions:
    def __init__(self):
        self.map = {
            "–∫–∞–∫": {
                ("–¥–µ–ª–∞", "–¥–µ–ª–∏—à–∫–∏",): lambda: self.bot_affairs,
                ("–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "—á—É–≤—Å—Ç–≤—É–µ—à—å",): lambda: self.bot_mood,
                ("–∏–º—è", "–∑–æ–≤—É—Ç", "–∑–≤–∞—Ç—å",): lambda: self.bot_name,
            },
            "—á—Ç–æ": {("—É–º–µ–µ—à—å", "–º–æ–∂–µ—à—å",): lambda: self.bot_abilities},
            "–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞": ("–Ø –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!", "–î–∞ —Ö –µ–≥–æ –∑!",),
        }

    @staticmethod
    def bot_name(update, context):
        context.bot.send_message(
            chat_id=update.effective_chat.id, text=f'–ú–µ–Ω—è –∑–æ–≤—É—Ç {update.effective_chat.bot["first_name"]}!\n–ê —Ç–µ–±—è?'
        )
        return "ASK_USER_NAME"

    @staticmethod
    def bot_abilities(update, context):
        context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–∏—á–µ–≥–æ... –í–µ–¥—å –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª–æ—Ö!")
        return "FREE_MESSAGE"

    @staticmethod
    def bot_mood(update, context):
        context.bot.send_message(chat_id=update.effective_chat.id, text=random.choice(("–û—Ç–ª–∏—á–Ω–æ–µ!", "–•–æ—Ä–æ—à–µ–µ!",)))
        context.bot.send_message(chat_id=update.effective_chat.id, text=random.choice(("–ê —É —Ç–µ–±—è?", "–ê –∫–∞–∫ —Ç–≤–æ–µ?",)))
        return "ASK_USER_MOOD"

    @staticmethod
    def bot_affairs(update, context):
        context.bot.send_message(
            chat_id=update.effective_chat.id, text=random.choice(("–í—Å–µ —Å—É–ø–µ—Ä!", "–ù–æ—Ä–º–∞–ª—å–Ω–æ", "–•–æ—Ä–æ—à–æ!",))
        )
        context.bot.send_message(
            chat_id=update.effective_chat.id, text=random.choice(("–ê –∫–∞–∫ —Ç–≤–æ–∏?", "–ê –∫–∞–∫ —É —Ç–µ–±—è?",))
        )
        return "ASK_USER_AFFAIRS"

    def __call__(self, update, context, phrase):
        words = nltk.word_tokenize(update.message.text)
        first_key = None
        for k in self.map:
            first_key = k if k in words else None
            if first_key:
                break
        if first_key:
            for itm in self.map[first_key]:
                second_key = itm if any(_ in words for _ in itm) else None
                if second_key:
                    break
        try:
            return self.map[first_key][second_key]()(update, context)
        except KeyError:
            context.bot.send_message(chat_id=update.effective_chat.id, text=random.choice(self.map["–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞"]))

    # if any(tuple(map(lambda x: x.lower() in phrase, self.name))):
    #     return self.bot_name(update, context)
    # try:
    #     context.bot.send_message(chat_id=update.effective_chat.id, text=random.choice(self.map[phrase]))
    # except KeyError:
    #     context.bot.send_message(chat_id=update.effective_chat.id, text='–Ø –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!')
